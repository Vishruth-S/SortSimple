{"version":3,"sources":["components/UI/Navbar/Navbar.js","containers/ArrayDisplay/ArrayDisplay.js","components/UI/ToolBar/ToolBar.js","components/SortingAlgorithms/BubbleSort.js","components/SortingAlgorithms/SelectionSort.js","components/SortingAlgorithms/InsertionSort.js","components/ShowAlgorithm/ShowAlgorithm.js","components/Sorter/Sorter.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ArrayDisplay","props","array","state","colors","map","value","key","style","height","backgroundColor","width","transition","showValue","ToolBar","optionChangeHandler","e","setState","target","clicked","ShowAlgorithmHandler","sortMethodHandler","bubblesorter","selectionSorter","insertionSorter","alert","disabled","this","disableInput","onClick","arrayReset","min","max","onChange","arraySizeHandler","defaultValue","speedChangeHandler","Component","BubbleSort","bubble","colorArr","marginLeft","SelectionSort","selection","InsertionSort","insertion","ShowAlgorithm","algo","Algocolor","BubblesortAlgo","AlgocolorSelect","SelectionSortAlgo","InsertionSortAlgo","randomNumber","Math","floor","random","swap","arr","first_Index","second_Index","temp","Sorter","arrayLen","speed","algorithm","new_array","arrlength","i","push","Array","length","fill","event","Actualspeed","barwidth","barWidthCalculater","Number","v","a","len","color","k","j","Promise","resolve","setTimeout","l","min_index","m","flag","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5a70fab.chunk.js","sourcesContent":["import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light mynav\">\r\n            <a className=\"navbar-brand\" href=\"#\">SortVisual</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    {/* <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Features</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Pricing</a>\r\n                    </li> */}\r\n                </ul>\r\n                <span className=\"navbar-text\">\r\n                    Made by VS\r\n                </span>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nimport './ArrayDisplay.css'\r\n\r\nconst ArrayDisplay = (props) => {\r\n    let array = props.state.array\r\n    let colors = props.state.colors\r\n    return (\r\n            <div className=\"array-container\">\r\n                    {array.map((value, id) => (\r\n                            <div \r\n                                className=\"bar\" \r\n                                key={id} \r\n                                style={{ height: value + 'px', backgroundColor: colors[id], width: props.state.width, transition: props.state.transition }} >\r\n                                {props.state.showValue ? <span className=\"number\">{value}</span> : null }\r\n                            </div>\r\n                    ))}\r\n                    <div className=\"temp-bar\"></div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default ArrayDisplay\r\n","\r\nimport React, { Component } from 'react'\r\n\r\nimport './ToolBar.css'\r\n\r\nclass ToolBar extends Component {\r\n    state = {\r\n        value: \"0\",\r\n    }\r\n    optionChangeHandler = (e) => {\r\n        // console.log(e.target.value)\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n        return this.props.clicked.ShowAlgorithmHandler(e.target.value)\r\n    }\r\n    sortMethodHandler = () => {\r\n        // console.log(this.state.value)\r\n        if(this.state.value===\"1\") {\r\n            return this.props.clicked.bubblesorter()\r\n        } else if(this.state.value===\"2\") {\r\n            return this.props.clicked.selectionSorter()\r\n        } else if(this.state.value===\"3\") {\r\n            return this.props.clicked.insertionSorter()\r\n        }{\r\n            alert(\"Please select Algorithm\")\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"tool-element tool-array\">\r\n                    <button className=\"tool-button\" disabled = {this.props.state.disableInput} onClick={this.props.clicked.arrayReset}>New array</button>\r\n                </div>\r\n                <div className=\"tool-element\">\r\n                    <div>Change Array Size</div>\r\n                    <input type=\"range\" min=\"10\" max=\"100\"  disabled = {this.props.state.disableInput} onChange={this.props.clicked.arraySizeHandler}></input>\r\n                </div>\r\n                <div className=\"tool-element tool-sort\">\r\n                    <div>Choose Sorting Algorithm</div>\r\n                    <div >\r\n                    <select defaultValue=\"0\" className=\"selector\" disabled = {this.props.state.disableInput} onChange={this.optionChangeHandler}>\r\n                        <option className=\"select-option-disabled\" value=\"0\" disabled>Select Algorithm</option>\r\n                        <option className=\"select-option\" value=\"1\">BubbleSort</option>\r\n                        <option className=\"select-option\" value=\"2\">SelectionSort</option> \r\n                        <option className=\"select-option\" value=\"3\">InsertionSort</option> \r\n                        {/* <option value=\"3\">SelectionSort</option>  */}\r\n                    </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tool-element\">\r\n                    <button className=\"tool-button\" disabled={this.props.state.disableInput} onClick={this.sortMethodHandler}>Sort</button>\r\n                </div>\r\n                <div className=\"tool-element tool-speed\">\r\n                    <div>Change Speed</div>\r\n                    <input type=\"range\" min=\"10\" max=\"601\" onChange={this.props.clicked.speedChangeHandler}></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolBar\r\n","import React from 'react'\r\n\r\nconst BubbleSort = (props) => {\r\n    return (\r\n        <div>\r\n            {props.bubble.map((value, id) => (\r\n                <div key={id} style = {{backgroundColor: props.colorArr[id], marginLeft: (id*20)+\"px\", height: \"30px\"}} >{value}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BubbleSort\r\n","import React from 'react'\r\n\r\nconst SelectionSort = (props) => {\r\n    return (\r\n        <div>\r\n            {props.selection.map((value, id) => ( \r\n                <div style = {{backgroundColor: props.colorArr[id], marginLeft: id<=4 ? (id*20)+\"px\" : ((7-id)*20)+\"px\", height: \"30px\" }} key={id}>{value}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectionSort\r\n","import React from 'react'\r\n\r\nconst InsertionSort = (props) => {\r\n    return (\r\n        <div>\r\n            {props.insertion.map((value, id) => ( \r\n                <div style = {{backgroundColor: props.colorArr[id], marginLeft: (id*20)+\"px\", height: \"30px\" }} key={id}>{value}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InsertionSort","import React from 'react'\r\n\r\nimport BubbleSort from '../SortingAlgorithms/BubbleSort'\r\nimport SelectionSort from '../SortingAlgorithms/SelectionSort'\r\nimport InsertionSort from '../SortingAlgorithms/InsertionSort'\r\n\r\nimport './ShowAlgorithm.css'\r\n\r\nconst ShowAlgorithm = (props) => {\r\n    let algo = \"\"\r\n    if(props.value===1) {\r\n        algo = <BubbleSort colorArr = {props.state.Algocolor} bubble={props.state.BubblesortAlgo} />\r\n    } else if(props.value===2) {\r\n        algo = <SelectionSort colorArr = {props.state.AlgocolorSelect} selection={props.state.SelectionSortAlgo} />\r\n    } else if(props.value===3) {\r\n        algo = <InsertionSort colorArr = {props.state.AlgocolorSelect} insertion={props.state.InsertionSortAlgo} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h3 className=\"head\">ALGORITHM</h3>\r\n            <span className=\"algo-text\">{algo}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowAlgorithm\r\n","import React, { Component } from 'react'\r\n\r\nimport './Sorter.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport Navbar from '../UI/Navbar/Navbar'\r\nimport ArrayDisplay from '../../containers/ArrayDisplay/ArrayDisplay'\r\nimport ToolBar from '../UI/ToolBar/ToolBar'\r\nimport ShowAlgorithm from '../ShowAlgorithm/ShowAlgorithm'\r\n\r\nclass Sorter extends Component {\r\n\r\n    state = {\r\n        array: [],\r\n        colors: [],\r\n        arrayLen: 30,\r\n        speed: 300,\r\n        width: \"25px\",\r\n        showValue: true,\r\n        disableInput: false,\r\n        transition: \"0.3s\",\r\n        algorithm: 0,\r\n        BubblesortAlgo: [\"for i=0 to last_Element\",\"for j=0 to indexOf_Last_Unsorted_Element\",\"if(left_Element>right_Element)\",\"swap(left_Element,right_Element)\"],\r\n        Algocolor: [\"white\",\"white\",\"white\",\"white\"],\r\n        SelectionSortAlgo: [\"Repeat (n-1) times\",\"set first unsorted element as min\",\"for each unsorted element\",\"if element<min\",\"set element as new min\",\"swap min with first unsorted element\"],\r\n        AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"white\"],\r\n        InsertionSortAlgo: [\"Mark first element as sorted\",\"for each unsorted x\",\"temp=x\",\"for j=last_Sorted_Index to 0\",\"if temp < current element[j]\",\"move temp to the left by 1\"]\r\n    } \r\n\r\n    componentDidMount() {\r\n        this.arrayReset();\r\n    }\r\n\r\n    arrayReset = () => {\r\n        const new_array = []\r\n        const arrlength = this.state.arrayLen\r\n        for( let i=0; i<arrlength; i++) {\r\n            new_array.push(randomNumber(30,500))\r\n        }\r\n\r\n        this.setState({array: new_array, colors: Array(new_array.length).fill('blueviolet')})\r\n        // this.setState({anim: new_array})\r\n    }\r\n\r\n    speedChangeHandler = (event) => {\r\n        let Actualspeed = 601 - event.target.value\r\n        this.setState(\r\n            {speed: Actualspeed}\r\n        )\r\n        if(Actualspeed > 200) {\r\n            this.setState({transition: \"0.3s\"})\r\n        } else {\r\n            this.setState({transition: \"0s\"})\r\n        }\r\n        // console.log(this.state.transition)\r\n    }\r\n\r\n    arraySizeHandler = (event) => {\r\n        // console.log(this.state.arrayLen)\r\n        this.setState({\r\n            transition: \"0s\"\r\n        })\r\n        const new_array = []\r\n        const arrlength = event.target.value\r\n        let barwidth = this.barWidthCalculater(arrlength)\r\n        this.setState({\r\n            width: barwidth\r\n        })\r\n        for( let i=0; i<arrlength; i++) {\r\n            new_array.push(randomNumber(30,500))\r\n        }\r\n        this.setState({arrayLen: event.target.value})\r\n        this.setState({array: new_array, colors: Array(new_array.length).fill('blueviolet')})\r\n        // console.log(this.state.arrayLen)\r\n    }\r\n    \r\n    barWidthCalculater = (arrlength) => {\r\n        let barwidth = \"25\"\r\n        if(arrlength<25 && arrlength>20){\r\n            barwidth = \"30\"\r\n        } else if(arrlength>25 && arrlength<30) {\r\n            barwidth = \"26\"\r\n        } \r\n        else if(arrlength>=10 && arrlength<=20) {\r\n            barwidth = \"40\"\r\n        } else if(arrlength>=30 && arrlength<40) {\r\n            barwidth = \"20\"\r\n        } else if(arrlength>=40 && arrlength<=50) {\r\n            barwidth = \"15\"\r\n        } else if(arrlength>50 && arrlength<=60) {\r\n            barwidth = \"12\"\r\n        } else if(arrlength>60 && arrlength<=70) {\r\n            barwidth = \"10\"\r\n        } else if(arrlength>70 && arrlength<=80) {\r\n            barwidth = \"8\"\r\n        } else if(arrlength>80 && arrlength<=90) {\r\n            barwidth = \"7\"\r\n        } else if(arrlength>=90) {\r\n            barwidth = \"6\"\r\n        }\r\n        let barwidthNum = Number(barwidth)\r\n        if(barwidthNum<30) {\r\n            this.setState({showValue: false, transition: \"0s\"})\r\n        } else {\r\n            this.setState({showValue: true, transition: \"0.3s\"})\r\n        }\r\n        barwidth += \"px\"\r\n        return barwidth;\r\n    }\r\n\r\n    ShowAlgorithmHandler = (v) => {\r\n        if(v===\"1\") {\r\n            this.setState({\r\n                algorithm: 1\r\n            })\r\n        } else if(v===\"2\") {\r\n            this.setState({\r\n                algorithm: 2\r\n            })\r\n        } else if(v===\"3\") {\r\n            this.setState({\r\n                algorithm: 3\r\n            })\r\n        }\r\n    }\r\n\r\n    bubblesorter = async () => {\r\n        this.setState({\r\n            disableInput: true,\r\n            algorithm: 1,\r\n        })\r\n        // console.log(this.state.arrayLen)\r\n        let arr = this.state.array\r\n        var len = arr.length\r\n        let i, j;\r\n        const colors = []\r\n        let color = 'blueviolet'\r\n        this.setState({\r\n            Algocolor: [\"yellow\",\"white\",\"white\",\"white\"]\r\n        })\r\n            for (i=0; i < len; i++){\r\n                this.setState({\r\n                        Algocolor: [\"white\",\"yellow\",\"white\",\"white\"]\r\n                    })\r\n                    for (j=0; j < len-i-1; j++){\r\n                        let speed = this.state.speed\r\n                        for (let k=0; k<len; k++) {                           \r\n                            if(k===j || k===j+1 ) \r\n                            {\r\n                                color = 'red'\r\n                            }\r\n                            else if(colors[k]!=='green')\r\n                            {\r\n                                color = 'blueviolet'\r\n                            }\r\n                            else {\r\n                                color = 'green'\r\n                            }\r\n                            colors[k] = color\r\n                        }\r\n                        // console.log(colors)\r\n                        await new Promise(resolve => setTimeout(resolve, speed));\r\n                        this.setState({ array: arr})\r\n                        // await new Promise(resolve => setTimeout(resolve, 1000));\r\n                        this.setState({\r\n                            Algocolor: [\"white\",\"white\",\"yellow\",\"white\"]\r\n                        })\r\n                        if (arr[j] > arr[j+1]){\r\n                            \r\n                            colors[j] = 'pink'\r\n                            colors[j+1] = 'pink'\r\n                            await new Promise(resolve => setTimeout(resolve, speed));\r\n                            this.setState({colors: colors})\r\n                            swap(arr, j, j+1);\r\n                            this.setState({\r\n                                Algocolor: [\"white\",\"white\",\"white\",\"yellow\"]\r\n                            })\r\n                            // this.setState({color: \"red\"})\r\n                        } \r\n                        else {\r\n                            await new Promise(resolve => setTimeout(resolve, speed));\r\n                        }\r\n                        // this.setState({array:arr, color: \"blueviolet\"})\r\n                        // const colors = arr.map((item, index) => (this.state.array[index] === item ? 'red' : 'blueviolet'));\r\n                        await new Promise(resolve => setTimeout(resolve, speed));\r\n                        this.setState({colors:colors})\r\n                    }\r\n                    colors[len-i-1] = 'green'\r\n                    this.setState({colors: colors });\r\n                }\r\n                this.setState({\r\n                    disableInput: false\r\n                })   \r\n                this.setState({\r\n                    Algocolor: [\"white\",\"white\",\"white\",\"white\"]\r\n                })\r\n        // this.setState({anim:arr})\r\n    }\r\n\r\n    selectionSorter = async ()=> {\r\n        this.setState({\r\n            disableInput: true,\r\n            algorithm: 2,\r\n            AlgocolorSelect: [\"yellow\",\"white\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n        let arr = this.state.array\r\n        let len = arr.length\r\n        let i,j, min_index;\r\n        let speed = this.state.speed\r\n        const colors = Array(arr.length).fill('blueviolet')\r\n        this.setState({\r\n            colors:colors,\r\n            AlgocolorSelect: [\"white\",\"yellow\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, speed));\r\n        for(i=0;i<len-1;i++) {\r\n            for(let l=i;l<len;l++) {\r\n                colors[l]=\"blueviolet\"\r\n            }\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n            min_index = i\r\n            colors[min_index]=\"red\"\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n                this.setState({\r\n                    colors:colors,\r\n                    AlgocolorSelect: [\"white\",\"white\",\"yellow\",\"white\",\"white\",\"white\"]\r\n                })\r\n            for(j=i+1;j<len;j++) \r\n            {\r\n                speed = this.state.speed\r\n                await new Promise(resolve => setTimeout(resolve, speed*0.3));\r\n                colors[j]=\"orange\"\r\n                    // colors[len-1]=\"orange\"\r\n                // console.log(colors)\r\n                this.setState({\r\n                    AlgocolorSelect: [\"white\",\"white\",\"white\",\"yellow\",\"white\",\"white\"]\r\n                })\r\n                if(arr[j] < arr[min_index])\r\n                {\r\n                    \r\n                    min_index = j    \r\n                    colors[min_index]=\"red\"\r\n                    for(let k=0;k<min_index;k++) {\r\n                        colors[k]=colors[k]!==\"green\" ? \"blueviolet\" : \"green\"\r\n                    }\r\n                    \r\n                    this.setState({\r\n                        colors:colors,\r\n                        AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"yellow\",\"white\"]\r\n                    })\r\n                    await new Promise(resolve => setTimeout(resolve, speed));\r\n                }\r\n                colors[j-1]=\"blueviolet\"\r\n                colors[min_index]=\"red\"\r\n                this.setState({\r\n                    colors:colors\r\n                })\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n            }\r\n            for(let m=i;m<len;m++) {\r\n                colors[m] = colors[m]!==\"red\" ? \"blueviolet\" : \"pink\"\r\n                colors[i]=\"pink\"\r\n            }\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            this.setState({\r\n                AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"yellow\"]\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            swap(arr, i, min_index)\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            this.setState({\r\n                array: arr\r\n            })\r\n            colors[i]=\"green\"\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n        }\r\n        colors[len-1]=\"green\"\r\n        colors[len-2]=\"green\"\r\n        this.setState({\r\n            colors:colors,\r\n            disableInput: false,\r\n            AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n    }\r\n\r\n    insertionSorter = async () => {\r\n        this.setState({\r\n            disableInput: true,\r\n            algorithm: 3,\r\n            AlgocolorSelect: [\"white\",\"yellow\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n        let arr = this.state.array\r\n        let len = arr.length\r\n        let colors = Array(arr.length).fill('blueviolet')\r\n        let speed = this.state.speed\r\n        await new Promise(resolve => setTimeout(resolve, speed*0.8));\r\n        for(let i=0;i<len;i++) {\r\n            let temp = arr[i]\r\n            if(i!==0) {\r\n                colors[i-1]='orange'\r\n            }\r\n            colors[i]='red'\r\n            // colors[i+1]='red'\r\n            this.setState({\r\n                colors:colors,\r\n                AlgocolorSelect: [\"white\",\"white\",\"yellow\",\"white\",\"white\",\"white\"]\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            this.setState({\r\n                AlgocolorSelect: [\"white\",\"white\",\"white\",\"yellow\",\"white\",\"white\"]\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed*0.8));\r\n            for(let j=i-1;j>=0;j--) {\r\n                speed = this.state.speed\r\n                let flag=0\r\n                this.setState({\r\n                    AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"yellow\",\"white\"]\r\n                })\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n                if(temp<arr[j]) {\r\n                    flag=0\r\n                    swap(arr, j, j+1)\r\n                    colors[j]='red'\r\n                    colors[j+1]='orange'\r\n                    this.setState({\r\n                        colors:colors,\r\n                        AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"yellow\"]\r\n                    })\r\n                    await new Promise(resolve => setTimeout(resolve, speed));\r\n                    this.setState({\r\n                        array: arr,\r\n                        colors:colors\r\n                    })\r\n                    // await new Promise(resolve => setTimeout(resolve, 1000));\r\n                } else {\r\n                    flag++\r\n                }\r\n                if(flag===1)\r\n                {\r\n                    let k=i\r\n                    while(k) {\r\n                        colors[k-1]='orange'\r\n                        k--\r\n                    }\r\n                    this.setState({\r\n                        colors:colors\r\n                    })\r\n                    break\r\n                }\r\n                // await new Promise(resolve => setTimeout(resolve, speed));\r\n                if(flag) {\r\n                    colors[j]='orange'\r\n                    this.setState({\r\n                        colors:colors\r\n                    })\r\n                }\r\n            }\r\n            colors[0]='orange'\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n        }\r\n        colors = Array(arr.length).fill('green')\r\n        this.setState({\r\n            array: arr,\r\n            colors: colors,\r\n            AlgocolorSelect: Array(6).fill(\"white\"),\r\n            disableInput: false,\r\n        })\r\n        \r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.speed)\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <div className=\"main\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-2 toolbar\">\r\n                            <ToolBar state={this.state} clicked={this}/>\r\n                        </div>\r\n                        <div className=\"col-7 array-display\">\r\n                            <ArrayDisplay state={this.state} />\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <ShowAlgorithm value={this.state.algorithm} state={this.state} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction randomNumber(min, max) {  \r\n    return Math.floor(Math.random() * (max - min) + min); \r\n}  \r\n\r\n\r\nfunction swap(arr, first_Index, second_Index){\r\n    var temp = arr[first_Index];\r\n    arr[first_Index] = arr[second_Index];\r\n    arr[second_Index] = temp;\r\n}\r\n\r\nexport default Sorter","import React from 'react';\nimport './App.css';\n\nimport Sorter from './components/Sorter/Sorter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}