{"version":3,"sources":["Assets/img/robot.jpg","Assets/img/robot2.jpg","Assets/img/robot3.jpg","Assets/img/robot4.jpg","Assets/img/robot5.jpg","Assets/img/sorter1.png","Assets/img/logo.png","containers/Modal/ModalGuide.js","components/UI/Navbar/Navbar.js","containers/ArrayDisplay/ArrayDisplay.js","components/UI/ToolBar/ToolBar.js","components/SortingAlgorithms/BubbleSort.js","components/SortingAlgorithms/SelectionSort.js","components/SortingAlgorithms/InsertionSort.js","components/ShowAlgorithm/ShowAlgorithm.js","components/Sorter/Sorter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModalGuide","state","show","page","pagedisplay","hideModal","setState","nextPage","nextpage","Array","length","fill","previousPage","prevpage","Modal","this","style","display","Header","className","Body","src","robotimg1","alt","robotimg5","robotimg3","sorter1","robotimg2","robotimg4","Footer","onClick","Component","Navbar","logo","id","href","ArrayDisplay","props","array","colors","map","value","key","height","backgroundColor","width","transition","showValue","ToolBar","optionChangeHandler","e","target","clicked","ShowAlgorithmHandler","sortMethodHandler","bubblesorter","selectionSorter","insertionSorter","alert","disabled","disableInput","arrayReset","type","min","max","defaultValue","onChange","arraySizeHandler","speed","speedChangeHandler","BubbleSort","bubble","colorArr","marginLeft","SelectionSort","selection","InsertionSort","insertion","ShowAlgorithm","algo","Algocolor","BubblesortAlgo","AlgocolorSelect","SelectionSortAlgo","InsertionSortAlgo","randomNumber","Math","floor","random","swap","arr","first_Index","second_Index","temp","Sorter","arrayLen","algorithm","new_array","arrlength","i","push","barwidth","barWidthCalculater","final_array","arrayHeightHandler","event","Actualspeed","screenSizeHandler","barNum","screen_width","window","innerWidth","toFixed","toString","small_arr","ele","Number","barwidthNum","v","a","len","color","k","j","Promise","resolve","setTimeout","l","min_index","m","flag","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,8cCsH5BC,E,4MAxGXC,MAAQ,CACJC,MAAM,EACNC,KAAM,EACNC,YAAa,CAAC,QAAQ,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,S,EAEpEC,UAAY,WACR,EAAKC,SAAS,CACVJ,MAAM,K,EAGdK,SAAW,WACP,IAAIC,EAAW,EAAKP,MAAME,KAC1BK,IACA,IAAIJ,EAAW,YAAO,EAAKH,MAAMG,cACjCA,EAAcK,MAAML,EAAYM,QAAQC,KAAK,SACjCH,GAAY,QACxB,EAAKF,SAAS,CACVH,KAAMK,EACNJ,YAAaA,K,EAGrBQ,aAAe,WACX,IAAIC,EAAW,EAAKZ,MAAME,KAC1BU,IACA,IAAIT,EAAW,YAAO,EAAKH,MAAMG,cACjCA,EAAcK,MAAML,EAAYM,QAAQC,KAAK,SACjCE,GAAY,QACxB,EAAKP,SAAS,CACVH,KAAMU,EACNT,YAAaA,K,uDAIjB,OACI,kBAACU,EAAA,EAAD,CAAOZ,KAAMa,KAAKd,MAAMC,MACpB,yBAAKc,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,wBAAIC,UAAU,YAAd,0DACd,kBAACL,EAAA,EAAMM,KAAP,KACI,yBAAKD,UAAU,iBAAgB,yBAAKA,UAAU,YAAYE,IAAKC,IAAWC,IAAI,SAC9E,uGACA,0HAGR,yBAAKP,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,gEACd,kBAACJ,EAAA,EAAMM,KAAP,KACI,yBAAKD,UAAU,iBAAgB,yBAAKA,UAAU,YAAYE,IAAKG,IAAWD,IAAI,SAC9E,6MACA,kGAGR,yBAAKP,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,sDACd,kBAACJ,EAAA,EAAMM,KAAP,KACI,yBAAKD,UAAU,iBAAgB,yBAAKA,UAAU,YAAYE,IAAKI,IAAWF,IAAI,SAC9E,iKACA,kFACA,0FAGR,yBAAKP,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,sDACd,kBAACJ,EAAA,EAAMM,KAAP,KACI,yBAAKD,UAAU,kBAAiB,yBAAKA,UAAU,aAAaE,IAAKK,IAASH,IAAI,SAC9E,qHACA,2FAGR,yBAAKP,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,qDACd,kBAACJ,EAAA,EAAMM,KAAP,KACI,gIACA,yCACA,4CACA,8CAGR,yBAAKJ,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,+CACd,kBAACJ,EAAA,EAAMM,KAAP,KACI,yBAAKD,UAAU,iBAAgB,yBAAKA,UAAU,YAAYE,IAAKM,IAAWJ,IAAI,SAC9E,kJACA,4GAGR,yBAAKP,MAAO,CAACC,QAASF,KAAKd,MAAMG,YAAY,KACzC,kBAACU,EAAA,EAAMI,OAAP,KAAc,wCACd,kBAACJ,EAAA,EAAMM,KAAP,KACI,yBAAKD,UAAU,iBAAgB,yBAAKA,UAAU,YAAYE,IAAKO,IAAWL,IAAI,SAC9E,iHACA,gGAGR,kBAACT,EAAA,EAAMe,OAAP,KACI,4BAAQC,QAASf,KAAKH,aAAcI,MAAO,CAACC,QAA0B,IAAlBF,KAAKd,MAAME,KAAW,OAAS,UAAnF,YACA,4BAAQ2B,QAASf,KAAKR,SAAUS,MAAO,CAACC,QAA0B,IAAlBF,KAAKd,MAAME,KAAW,OAAS,UAA/E,QACA,4BAAQ2B,QAASf,KAAKV,UAAWW,MAAO,CAACC,QAA0B,IAAlBF,KAAKd,MAAME,KAAW,QAAU,SAAjF,UACA,4BAAQ2B,QAASf,KAAKV,WAAtB,gB,GAlGK0B,a,yBCQVC,EAfA,WACX,OACI,yBAAKb,UAAU,2CACX,0BAAMA,UAAU,gBAAgB,yBAAKA,UAAU,WAAWI,IAAI,kBAAkBF,IAAKY,OACrF,yBAAKd,UAAU,2BAA2Be,GAAG,cACzC,wBAAIf,UAAU,uBAEd,0BAAMA,UAAU,0BAAhB,WACY,uBAAGgB,KAAK,oCAAR,UCQbC,G,MAlBM,SAACC,GAClB,IAAIC,EAAK,YAAOD,EAAMpC,MAAMqC,OACxBC,EAAM,YAAOF,EAAMpC,MAAMsC,QAC7B,OACQ,yBAAKpB,UAAU,mBACNmB,EAAME,KAAI,SAACC,EAAOP,GAAR,OACH,yBACIf,UAAU,MACVuB,IAAKR,EACLlB,MAAO,CAAE2B,OAAQF,EAAQ,KAAMG,gBAAiBL,EAAOL,GAAKW,MAAOR,EAAMpC,MAAM4C,MAAOC,WAAYT,EAAMpC,MAAM6C,aAC7GT,EAAMpC,MAAM8C,UAAY,0BAAM5B,UAAU,UAAUsB,GAAgB,SAG/E,yBAAKtB,UAAU,gBC4CpB6B,G,kNAvDX/C,MAAQ,CACJwC,MAAO,K,EAEXQ,oBAAsB,SAACC,GAKnB,OAHA,EAAK5C,SAAS,CACVmC,MAAOS,EAAEC,OAAOV,QAEb,EAAKJ,MAAMe,QAAQC,qBAAqBH,EAAEC,OAAOV,Q,EAE5Da,kBAAoB,WAEhB,MAAsB,MAAnB,EAAKrD,MAAMwC,MACH,EAAKJ,MAAMe,QAAQG,eACD,MAAnB,EAAKtD,MAAMwC,MACV,EAAKJ,MAAMe,QAAQI,kBACD,MAAnB,EAAKvD,MAAMwC,MACV,EAAKJ,MAAMe,QAAQK,uBAE1BC,MAAM,4B,uDAIV,OACI,yBAAKvC,UAAU,kBACX,yBAAKA,UAAU,2BACX,4BAAQA,UAAU,cAAcwC,SAAY5C,KAAKsB,MAAMpC,MAAM2D,aAAc9B,QAASf,KAAKsB,MAAMe,QAAQS,YAAvG,cAEJ,yBAAK1C,UAAU,gCACX,kDACA,2BAAO2C,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMC,aAAa,KAAKN,SAAY5C,KAAKsB,MAAMpC,MAAM2D,aAAcM,SAAUnD,KAAKsB,MAAMe,QAAQe,oBAErI,yBAAKhD,UAAU,0BACX,yDACA,6BACA,4BAAQ8C,aAAa,IAAI9C,UAAU,WAAWwC,SAAY5C,KAAKsB,MAAMpC,MAAM2D,aAAcM,SAAUnD,KAAKkC,qBACpG,4BAAQ9B,UAAU,yBAAyBsB,MAAM,IAAIkB,UAAQ,GAA7D,oBACA,4BAAQxC,UAAU,gBAAgBsB,MAAM,KAAxC,cACA,4BAAQtB,UAAU,gBAAgBsB,MAAM,KAAxC,iBACA,4BAAQtB,UAAU,gBAAgBsB,MAAM,KAAxC,oBAIR,yBAAKtB,UAAU,8BACX,4BAAQA,UAAU,cAAcwC,SAAU5C,KAAKsB,MAAMpC,MAAM2D,aAAc9B,QAASf,KAAKuC,mBAAvF,SAEJ,yBAAKnC,UAAU,2BACX,6CACA,2BAAO2C,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMvB,MAAO,IAAI1B,KAAKsB,MAAMpC,MAAMmE,MAAOF,SAAUnD,KAAKsB,MAAMe,QAAQiB,2B,GAjDrGtC,cCOPuC,EAVI,SAACjC,GAChB,OACI,6BACKA,EAAMkC,OAAO/B,KAAI,SAACC,EAAOP,GAAR,OACd,yBAAKQ,IAAKR,EAAIlB,MAAS,CAAC4B,gBAAiBP,EAAMmC,SAAStC,GAAKuC,WAAgB,GAAHvC,EAAO,KAAMS,OAAQ,SAAWF,QCM3GiC,EAVO,SAACrC,GACnB,OACI,6BACKA,EAAMsC,UAAUnC,KAAI,SAACC,EAAOP,GAAR,OACjB,yBAAKlB,MAAS,CAAC4B,gBAAiBP,EAAMmC,SAAStC,GAAKuC,WAAYvC,GAAI,EAAQ,GAAHA,EAAO,KAAe,IAAN,EAAEA,GAAQ,KAAMS,OAAQ,QAAUD,IAAKR,GAAKO,QCMtImC,EAVO,SAACvC,GACnB,OACI,6BACKA,EAAMwC,UAAUrC,KAAI,SAACC,EAAOP,GAAR,OACjB,yBAAKlB,MAAS,CAAC4B,gBAAiBP,EAAMmC,SAAStC,GAAKuC,WAAgB,GAAHvC,EAAO,KAAMS,OAAQ,QAAUD,IAAKR,GAAKO,QCmB3GqC,G,MAjBO,SAACzC,GACnB,IAAI0C,EAAO,qBAQX,OAPiB,IAAd1C,EAAMI,MACLsC,EAAO,kBAAC,EAAD,CAAYP,SAAYnC,EAAMpC,MAAM+E,UAAWT,OAAQlC,EAAMpC,MAAMgF,iBACtD,IAAd5C,EAAMI,MACZsC,EAAO,kBAAC,EAAD,CAAeP,SAAYnC,EAAMpC,MAAMiF,gBAAiBP,UAAWtC,EAAMpC,MAAMkF,oBAClE,IAAd9C,EAAMI,QACZsC,EAAO,kBAAC,EAAD,CAAeP,SAAYnC,EAAMpC,MAAMiF,gBAAiBL,UAAWxC,EAAMpC,MAAMmF,qBAGtF,6BACI,wBAAIjE,UAAU,QAAd,aACA,yBAAKA,UAAU,aAAa4D,MCmaxC,SAASM,EAAatB,EAAKC,GACvB,OAAOsB,KAAKC,MAAMD,KAAKE,UAAYxB,EAAMD,GAAOA,GAIpD,SAAS0B,EAAKC,EAAKC,EAAaC,GAC5B,IAAIC,EAAOH,EAAIC,GACfD,EAAIC,GAAeD,EAAIE,GACvBF,EAAIE,GAAgBC,EAGTC,M,4MArbX7F,MAAQ,CACJqC,MAAO,GACPC,OAAQ,GACRwD,SAAU,GACV3B,MAAO,IACPvB,MAAO,OACPE,WAAW,EACXa,cAAc,EACdd,WAAY,OACZkD,UAAW,EACXf,eAAgB,CAAC,0BAA0B,mCAAmC,gCAAgC,oCAC9GD,UAAW,CAAC,QAAQ,QAAQ,QAAQ,SACpCG,kBAAmB,CAAC,qBAAqB,oCAAoC,4BAA4B,iBAAiB,yBAAyB,wCACnJD,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAC1DE,kBAAmB,CAAC,+BAA+B,sBAAsB,SAAS,+BAA+B,+BAA+B,+B,EAOpJvB,WAAa,WAGT,IAFA,IAAMoC,EAAY,GACZC,EAAY,EAAKjG,MAAM8F,SACpBI,EAAE,EAAGA,EAAED,EAAWC,IACvBF,EAAUG,KAAKf,EAAa,GAAG,MAEnC,IAAIgB,EAAW,EAAKC,mBAAmBJ,GACvC,EAAK5F,SAAS,CACVuC,MAAOwD,IAEX,IAAIE,EAAc,EAAKC,mBAAmBP,GAC1C,EAAK3F,SAAS,CAACgC,MAAOiE,EAAahE,OAAQ9B,MAAM8F,EAAY7F,QAAQC,KAAK,iB,EAG9E0D,mBAAqB,SAACoC,GAClB,IAAIC,EAAc,IAAMD,EAAMtD,OAAOV,MACrC,EAAKnC,SACD,CAAC8D,MAAOsC,IAETA,EAAc,IACb,EAAKpG,SAAS,CAACwC,WAAY,SAE3B,EAAKxC,SAAS,CAACwC,WAAY,Q,EAInCqB,iBAAmB,SAACsC,GAChB,IAAMR,EAAY,GACZC,EAAYO,EAAMtD,OAAOV,MAC3B4D,EAAW,EAAKC,mBAAmBJ,GACvC,EAAK5F,SAAS,CACVuC,MAAOwD,IAEX,IAAK,IAAIF,EAAE,EAAGA,EAAED,EAAWC,IACvBF,EAAUG,KAAKf,EAAa,GAAG,MAEnC,IAAIkB,EAAc,EAAKC,mBAAmBP,GAC1C,EAAK3F,SAAS,CAACyF,SAAUU,EAAMtD,OAAOV,QACtC,EAAKnC,SAAS,CAACgC,MAAOiE,EAAahE,OAAQ9B,MAAM8F,EAAY7F,QAAQC,KAAK,iB,EAG9EgG,kBAAoB,SAACC,GACjB,IAAIC,EAAeC,OAAOC,WAC1B,OAAGF,EAAe,MAAQA,EAAa,KAEnCD,GADAA,GAAQ,KACQI,QAAQ,IACFC,WAEhBJ,GAAgB,KAAOA,EAAa,KAE1CD,GADAA,GAAQ,IACQI,QAAQ,IACFC,WAEhBJ,GAAgB,KAEtBD,GADAA,GAAQ,KACQI,QAAQ,IACFC,WAGPL,EAAOK,Y,EAM9BT,mBAAqB,SAACU,GAElB,GADmBJ,OAAOC,YACP,IACf,IAAI,IAAIZ,EAAE,EAAEA,EAAEe,EAAUxG,OAAOyF,IAAK,CAChC,IAAIgB,EAAMD,EAAUf,GAEpBgB,GADAA,GAAK,IACGH,QAAQ,GAChBE,EAAUf,GAAGiB,OAAOD,GAG5B,OAAOD,G,EAGXZ,mBAAqB,SAACJ,GAClB,IAAIG,EAAW,KACZH,EAAU,IAAMA,EAAU,GACzBG,EAAW,KACLH,EAAU,IAAMA,EAAU,GAChCG,EAAW,KAEPH,GAAW,IAAMA,GAAW,GAChCG,EAAW,KACLH,GAAW,IAAMA,EAAU,GACjCG,EAAW,KACLH,GAAW,IAAMA,EAAU,GACjCG,EAAW,KACLH,GAAW,IAAMA,GAAW,GAClCG,EAAW,KACLH,EAAU,IAAMA,GAAW,GACjCG,EAAW,KACLH,EAAU,IAAMA,GAAW,GACjCG,EAAW,KACLH,EAAU,IAAMA,GAAW,GACjCG,EAAW,KACLH,EAAU,IAAMA,GAAW,GACjCG,EAAW,IACLH,EAAU,IAAMA,GAAW,GACjCG,EAAW,IACLH,GAAW,KACjBG,EAAW,KAEf,IAAIgB,EAAcD,OAAOf,GASzB,OARAA,EAAW,EAAKM,kBAAkBU,IAClCA,EAAcD,OAAOf,IACN,GACX,EAAK/F,SAAS,CAACyC,WAAW,IAE1B,EAAKzC,SAAS,CAACyC,WAAW,IAE9BsD,GAAY,M,EAIhBhD,qBAAuB,SAACiE,GACb,MAAJA,EACC,EAAKhH,SAAS,CACV0F,UAAW,IAEL,MAAJsB,EACN,EAAKhH,SAAS,CACV0F,UAAW,IAEL,MAAJsB,GACN,EAAKhH,SAAS,CACV0F,UAAW,K,EAKvBzC,a,sBAAe,wCAAAgE,EAAA,sDACX,EAAKjH,SAAS,CACVsD,cAAc,EACdoC,UAAW,IAEXN,EALO,YAKG,EAAKzF,MAAMqC,OACrBkF,EAAM9B,EAAIhF,OAER6B,EAAS,GACXkF,EAAQ,aACZ,EAAKnH,SAAS,CACV0E,UAAW,CAAC,SAAS,QAAQ,QAAQ,WAEhCmB,EAAE,EAbA,YAaGA,EAAIqB,GAbP,iBAcH,EAAKlH,SAAS,CACN0E,UAAW,CAAC,QAAQ,SAAS,QAAQ,WAf1C,IAAAuC,EAAA,oCAAAA,EAAA,sDAmBK,IADInD,EAAQ,EAAKnE,MAAMmE,MACdsD,EAAE,EAAGA,EAAEF,EAAKE,IAGbD,EAFDC,IAAIC,GAAKD,IAAIC,EAAE,EAEN,MAEQ,UAAZpF,EAAOmF,GAEH,aAGA,QAEZnF,EAAOmF,GAAKD,EA/BrB,gBAiCW,IAAIG,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAjCtD,UAkCK,EAAK9D,SAAS,CAAEgC,MAAOoD,IACvB,EAAKpF,SAAS,CACV0E,UAAW,CAAC,QAAQ,QAAQ,SAAS,aAErCU,EAAIiC,GAAKjC,EAAIiC,EAAE,IAtCxB,wBAwCSpF,EAAOoF,GAAK,OACZpF,EAAOoF,EAAE,GAAK,OAzCvB,UA0Ce,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MA1C1D,QA2CS,EAAK9D,SAAS,CAACiC,OAAQA,IACvBkD,EAAKC,EAAKiC,EAAGA,EAAE,GACf,EAAKrH,SAAS,CACV0E,UAAW,CAAC,QAAQ,QAAQ,QAAQ,YA9CjD,yCAkDe,IAAI4C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAlD1D,yBAoDW,IAAIwD,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MApDtD,QAqDK,EAAK9D,SAAS,CAACiC,OAAOA,IArD3B,2CAiBMoF,EAAE,EAjBR,aAiBWA,EAAIH,EAAIrB,EAAE,GAjBrB,6DAiBwBwB,IAjBxB,wBAuDCpF,EAAOiF,EAAIrB,EAAE,GAAK,QAClB,EAAK7F,SAAS,CAACiC,OAAQA,IAxDxB,QAaY4D,IAbZ,uBA0DH,EAAK7F,SAAS,CACVsD,cAAc,EACdQ,MAAO,IACPtB,WAAY,OACZkC,UAAW,CAAC,QAAQ,QAAQ,QAAQ,WA9DrC,4C,EAkEfxB,gB,sBAAkB,8CAAA+D,EAAA,6DACd,EAAKjH,SAAS,CACVsD,cAAc,EACdoC,UAAW,EACXd,gBAAiB,CAAC,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,WAE3DQ,EANU,YAMA,EAAKzF,MAAMqC,OACrBkF,EAAM9B,EAAIhF,OAEV0D,EAAQ,EAAKnE,MAAMmE,MACjB7B,EAAS9B,MAAMiF,EAAIhF,QAAQC,KAAK,cACtC,EAAKL,SAAS,CACViC,OAAOA,EACP2C,gBAAiB,CAAC,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,WAbjD,SAeR,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAfnC,OAgBV+B,EAAE,EAhBQ,YAgBNA,EAAEqB,EAAI,GAhBA,iBAiBV,IAAQO,EAAE5B,EAAE4B,EAAEP,EAAIO,IACdxF,EAAOwF,GAAG,aAlBJ,OAoBV,EAAKzH,SAAS,CACViC,OAAOA,IAGXA,EADAyF,EAAY7B,GACM,MAxBR,UAyBA,IAAIyB,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAzB3C,QA0BN,EAAK9D,SAAS,CACViC,OAAOA,EACP2C,gBAAiB,CAAC,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,WAE/DyC,EAAExB,EAAE,EA9BE,aA8BAwB,EAAEH,GA9BF,wBAgCNpD,EAAQ,EAAKnE,MAAMmE,MAhCb,UAiCA,IAAIwD,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAe,GAANzD,MAjC3C,WAkCN7B,EAAOoF,GAAG,SACV,EAAKrH,SAAS,CACV4E,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,aAE5DQ,EAAIiC,GAAKjC,EAAIsC,IAtCV,iBA2CF,IADAzF,EADAyF,EAAYL,GACM,MACVD,EAAE,EAAEA,EAAEM,EAAUN,IACpBnF,EAAOmF,GAAe,UAAZnF,EAAOmF,GAAe,aAAe,QA5CjD,OA+CF,EAAKpH,SAAS,CACViC,OAAOA,EACP2C,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,WAjD7D,UAmDI,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAnD/C,eAqDN7B,EAAOoF,EAAE,GAAG,aACZpF,EAAOyF,GAAW,MAClB,EAAK1H,SAAS,CACViC,OAAOA,IAxDL,UA0DA,IAAIqF,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MA1D3C,QA8BMuD,IA9BN,wBA4DV,IAAQM,EAAE9B,EAAE8B,EAAET,EAAIS,IACd1F,EAAO0F,GAAiB,QAAZ1F,EAAO0F,GAAa,aAAe,OAC/C1F,EAAO4D,GAAG,OA9DJ,OAgEV,EAAK7F,SAAS,CACViC,OAAOA,IAjED,UAmEJ,IAAIqF,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAnEvC,eAoEV,EAAK9D,SAAS,CACV4E,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,YArEpD,UAuEJ,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAvEvC,eAwEVqB,EAAKC,EAAKS,EAAG6B,GAxEH,UAyEJ,IAAIJ,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAzEvC,eA0EV,EAAK9D,SAAS,CACVgC,MAAOoD,IAEXnD,EAAO4D,GAAG,QACV,EAAK7F,SAAS,CACViC,OAAOA,IA/ED,UAiFJ,IAAIqF,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAjFvC,QAgBE+B,IAhBF,uBAmFd5D,EAAOiF,EAAI,GAAG,QACdjF,EAAOiF,EAAI,GAAG,QACd,EAAKlH,SAAS,CACViC,OAAOA,EACPqB,cAAc,EACdQ,MAAO,IACPtB,WAAY,OACZoC,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WA1FhD,4C,EA8FlBzB,gB,sBAAkB,4CAAA8D,EAAA,6DACd,EAAKjH,SAAS,CACVsD,cAAc,EACdoC,UAAW,EACXd,gBAAiB,CAAC,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,WAE3DQ,EANU,YAMA,EAAKzF,MAAMqC,OACrBkF,EAAM9B,EAAIhF,OACV6B,EAAS9B,MAAMiF,EAAIhF,QAAQC,KAAK,cAChCyD,EAAQ,EAAKnE,MAAMmE,MATT,SAUR,IAAIwD,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAe,GAANzD,MAVnC,OAWN+B,EAAE,EAXI,YAWFA,EAAEqB,GAXA,wBAYN3B,EAAOH,EAAIS,GACR,IAAJA,IACC5D,EAAO4D,EAAE,GAAG,UAEhB5D,EAAO4D,GAAG,MACV,EAAK7F,SAAS,CACViC,OAAOA,EACP2C,gBAAiB,CAAC,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,WAnBrD,UAqBJ,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MArBvC,eAsBV,EAAK9D,SAAS,CACV4E,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,WAvBrD,UAyBJ,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAe,GAANzD,MAzBvC,QA0BFuD,EAAExB,EAAE,EA1BF,aA0BIwB,GAAG,GA1BP,wBA2BNvD,EAAQ,EAAKnE,MAAMmE,MACf8D,EAAK,EACT,EAAK5H,SAAS,CACV4E,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,WA9BzD,UAgCA,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MAhC3C,aAiCHyB,EAAKH,EAAIiC,IAjCN,wBAkCFO,EAAK,EACLzC,EAAKC,EAAKiC,EAAGA,EAAE,GACfpF,EAAOoF,GAAG,MACVpF,EAAOoF,EAAE,GAAG,SACZ,EAAKrH,SAAS,CACViC,OAAOA,EACP2C,gBAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,YAxC5D,UA0CI,IAAI0C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASzD,MA1C/C,QA2CF,EAAK9D,SAAS,CACVgC,MAAOoD,EACPnD,OAAOA,IA7CT,wBAgDF2F,IAhDE,WAkDI,IAAPA,EAlDG,iBAqDF,IADIR,EAAEvB,EACAuB,GACFnF,EAAOmF,EAAE,GAAG,SACZA,IAvDF,OAyDF,EAAKpH,SAAS,CACViC,OAAOA,IA1DT,6BA8DH2F,IACC3F,EAAOoF,GAAG,SACV,EAAKrH,SAAS,CACViC,OAAOA,KAjET,QA0BSoF,IA1BT,wBAqEVpF,EAAO,GAAG,SACV,EAAKjC,SAAS,CACViC,OAAOA,IAvED,QAWI4D,IAXJ,uBA0Ed5D,EAAS9B,MAAMiF,EAAIhF,QAAQC,KAAK,SAChC,EAAKL,SAAS,CACVgC,MAAOoD,EACPnD,OAAQA,EACR2C,gBAAiBzE,MAAM,GAAGE,KAAK,SAC/BiD,cAAc,EACdQ,MAAO,IACPtB,WAAY,SAjFF,4C,kEAzSd/B,KAAK8C,e,+BAgYL,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAK1C,UAAU,QACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAASlB,MAAOc,KAAKd,MAAOmD,QAASrC,QAEzC,yBAAKI,UAAU,iCACX,kBAAC,EAAD,CAAclB,MAAOc,KAAKd,SAE9B,yBAAKkB,UAAU,mBACX,kBAAC,EAAD,CAAesB,MAAO1B,KAAKd,MAAM+F,UAAW/F,MAAOc,KAAKd,gB,GAja/D8B,aCENoG,MARf,WACE,OACE,yBAAKhH,UAAU,OACb,kBAAC,EAAD,QCIciH,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8bc47e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.611c8969.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot2.353ec36f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot3.34190fec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot4.5754fb60.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot5.c2f723ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sorter1.3c442d83.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee6d1719.png\";","import React, { Component } from 'react'\r\n\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport './ModalGuide.css'\r\n\r\nimport robotimg1 from '../../Assets/img/robot.jpg'\r\nimport robotimg2 from '../../Assets/img/robot2.jpg'\r\nimport robotimg3 from '../../Assets/img/robot3.jpg'\r\nimport robotimg4 from '../../Assets/img/robot4.jpg'\r\nimport robotimg5 from '../../Assets/img/robot5.jpg'\r\nimport sorter1 from '../../Assets/img/sorter1.png'\r\n\r\nclass ModalGuide extends Component {\r\n    state = {\r\n        show: true,\r\n        page: 0,\r\n        pagedisplay: [\"block\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"]\r\n    }\r\n    hideModal = () => {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    } \r\n    nextPage = () => {\r\n        let nextpage = this.state.page\r\n        nextpage++\r\n        let pagedisplay = [...this.state.pagedisplay]\r\n        pagedisplay = Array(pagedisplay.length).fill(\"none\")\r\n        pagedisplay[nextpage] = \"block\"\r\n        this.setState({\r\n            page: nextpage,\r\n            pagedisplay: pagedisplay\r\n        })\r\n    }\r\n    previousPage = () => {\r\n        let prevpage = this.state.page\r\n        prevpage--\r\n        let pagedisplay = [...this.state.pagedisplay]\r\n        pagedisplay = Array(pagedisplay.length).fill(\"none\")\r\n        pagedisplay[prevpage] = \"block\"\r\n        this.setState({\r\n            page: prevpage,\r\n            pagedisplay: pagedisplay\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.state.show}>\r\n                <div style={{display: this.state.pagedisplay[0]}}>\r\n                    <Modal.Header><h5 className=\"heading1\">Welcome to SortSimple, A sorting algorithm visualiser</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"robot-img-div\"><img className=\"robot-img\" src={robotimg1} alt=\"img\"/></div>\r\n                        <p>This short guide will walk you through the features of this application.</p>\r\n                        <p>If you want to dive right in, feel free to press the \"Skip\" button. Otherwise, press next</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <div style={{display: this.state.pagedisplay[1]}}>\r\n                    <Modal.Header><h5>So what is a sorting Algorithm?</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"robot-img-div\"><img className=\"robot-img\" src={robotimg5} alt=\"img\" /></div>\r\n                        <p>A sorting algorithm is a method for reorganizing a large number of items into a specific order, such as alphabetical, highest-to-lowest value or shortest-to-longest distance.</p>\r\n                        <p>This application visualizes various sorting algorithms in action!</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <div style={{display: this.state.pagedisplay[2]}}>\r\n                    <Modal.Header><h5>About this visualiser</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"robot-img-div\"><img className=\"robot-img\" src={robotimg3} alt=\"img\" /></div>\r\n                        <p>Here, an array of bars of random heights are displayed. You can change the size of the array using the \"change array size\" slider.</p>\r\n                        <p>Minimum is 10 elements and maximum is 100 elements.</p>\r\n                        <p>Note that larger the array, more will be the sorting time</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <div style={{display: this.state.pagedisplay[3]}}>\r\n                    <Modal.Header><h5>Selcting an algorithm</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\".robot-img-div\"><img className=\"sorter-img\" src={sorter1} alt=\"img\" /></div>\r\n                        <p>You can select any of the listed algorithms from the \"select algorithm\" drop-down menu</p>\r\n                        <p>This will also display the selected algorithm on the right</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <div style={{display: this.state.pagedisplay[4]}}>\r\n                    <Modal.Header><h5>Meet the algorithms!</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <p>Not all algorithms are created equal. Here are the all algorithms listed with a brief description</p>\r\n                        <p>BubbleSort</p>\r\n                        <p>SelectionSort</p>\r\n                        <p>InsertionSort</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <div style={{display: this.state.pagedisplay[5]}}>\r\n                    <Modal.Header><h5>Get sorting :)</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"robot-img-div\"><img className=\"robot-img\" src={robotimg2} alt=\"img\" /></div>\r\n                        <p>Once you finish adjusting the array size and choosing an algorithm, Click on the \"Sort\" button to begin the action!</p>\r\n                        <p>You can adjust the animation speed anytime using the \"change speed\" slider.</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <div style={{display: this.state.pagedisplay[6]}}>\r\n                    <Modal.Header><h5>Enjoy !</h5></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"robot-img-div\"><img className=\"robot-img\" src={robotimg4} alt=\"img\" /></div>\r\n                        <p>I hope you have just as much fun using this visualising tool as I had building it.</p>\r\n                        <p>You can check out the source code for this project in my Github</p>\r\n                    </Modal.Body>\r\n                </div>\r\n                <Modal.Footer>\r\n                    <button onClick={this.previousPage} style={{display:this.state.page===0 ? \"none\" : \"block\"}}>Previous</button>\r\n                    <button onClick={this.nextPage} style={{display:this.state.page===6 ? \"none\" : \"block\"}}>Next</button>\r\n                    <button onClick={this.hideModal} style={{display:this.state.page===6 ? \"block\" : \"none\"}}>Finish</button>\r\n                    <button onClick={this.hideModal}>Cancel</button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n          );\r\n    }\r\n};\r\n\r\nexport default ModalGuide","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './Navbar.css'\r\n\r\nimport logo from '../../../Assets/img/logo.png'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand navbar-light mynav\">\r\n            <span className=\"navbar-brand\" ><img className=\"nav-logo\" alt=\"SortSimple_logo\" src={logo} /></span>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                </ul>\r\n                <span className=\"navbar-text float-left\">\r\n                    Made by <a href=\"https://vishruth-s.github.io/Me/\">VS</a>\r\n                </span>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nimport './ArrayDisplay.css'\r\n\r\nconst ArrayDisplay = (props) => {\r\n    let array = [...props.state.array]\r\n    let colors = [...props.state.colors]\r\n    return (\r\n            <div className=\"array-container\">\r\n                    {array.map((value, id) => (\r\n                            <div \r\n                                className=\"bar\" \r\n                                key={id} \r\n                                style={{ height: value + 'px', backgroundColor: colors[id], width: props.state.width, transition: props.state.transition }} >\r\n                                {props.state.showValue ? <span className=\"number\">{value}</span> : null }\r\n                            </div>\r\n                    ))}\r\n                    <div className=\"temp-bar\"></div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default ArrayDisplay\r\n","\r\nimport React, { Component } from 'react'\r\n\r\nimport './ToolBar.css'\r\n\r\nclass ToolBar extends Component {\r\n    state = {\r\n        value: \"0\",\r\n    }\r\n    optionChangeHandler = (e) => {\r\n        // console.log(e.target.value)\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n        return this.props.clicked.ShowAlgorithmHandler(e.target.value)\r\n    }\r\n    sortMethodHandler = () => {\r\n        // console.log(this.state.value)\r\n        if(this.state.value===\"1\") {\r\n            return this.props.clicked.bubblesorter()\r\n        } else if(this.state.value===\"2\") {\r\n            return this.props.clicked.selectionSorter()\r\n        } else if(this.state.value===\"3\") {\r\n            return this.props.clicked.insertionSorter()\r\n        } else {\r\n            alert(\"Please select Algorithm\")\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"tool-container\">\r\n                <div className=\"tool-element tool-array\">\r\n                    <button className=\"tool-button\" disabled = {this.props.state.disableInput} onClick={this.props.clicked.arrayReset}>New array</button>\r\n                </div>\r\n                <div className=\"tool-element tool-array-size\">\r\n                    <div>Change Array Size</div>\r\n                    <input type=\"range\" min=\"10\" max=\"100\" defaultValue=\"25\" disabled = {this.props.state.disableInput} onChange={this.props.clicked.arraySizeHandler}></input>\r\n                </div>\r\n                <div className=\"tool-element tool-sort\">\r\n                    <div>Choose Sorting Algorithm</div>\r\n                    <div >\r\n                    <select defaultValue=\"0\" className=\"selector\" disabled = {this.props.state.disableInput} onChange={this.optionChangeHandler}>\r\n                        <option className=\"select-option-disabled\" value=\"0\" disabled>Select Algorithm</option>\r\n                        <option className=\"select-option\" value=\"1\">BubbleSort</option>\r\n                        <option className=\"select-option\" value=\"2\">SelectionSort</option> \r\n                        <option className=\"select-option\" value=\"3\">InsertionSort</option> \r\n                    </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tool-element tool-sort-btn\">\r\n                    <button className=\"tool-button\" disabled={this.props.state.disableInput} onClick={this.sortMethodHandler}>Sort</button>\r\n                </div>\r\n                <div className=\"tool-element tool-speed\">\r\n                    <div>Change Speed</div>\r\n                    <input type=\"range\" min=\"10\" max=\"601\" value={601-this.props.state.speed} onChange={this.props.clicked.speedChangeHandler}></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolBar\r\n","import React from 'react'\r\n\r\nconst BubbleSort = (props) => {\r\n    return (\r\n        <div>\r\n            {props.bubble.map((value, id) => (\r\n                <div key={id} style = {{backgroundColor: props.colorArr[id], marginLeft: (id*20)+\"px\", height: \"30px\"}} >{value}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BubbleSort\r\n","import React from 'react'\r\n\r\nconst SelectionSort = (props) => {\r\n    return (\r\n        <div>\r\n            {props.selection.map((value, id) => ( \r\n                <div style = {{backgroundColor: props.colorArr[id], marginLeft: id<=4 ? (id*20)+\"px\" : ((7-id)*20)+\"px\", height: \"30px\" }} key={id}>{value}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectionSort\r\n","import React from 'react'\r\n\r\nconst InsertionSort = (props) => {\r\n    return (\r\n        <div>\r\n            {props.insertion.map((value, id) => ( \r\n                <div style = {{backgroundColor: props.colorArr[id], marginLeft: (id*12)+\"px\", height: \"30px\" }} key={id}>{value}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InsertionSort","import React from 'react'\r\n\r\nimport BubbleSort from '../SortingAlgorithms/BubbleSort'\r\nimport SelectionSort from '../SortingAlgorithms/SelectionSort'\r\nimport InsertionSort from '../SortingAlgorithms/InsertionSort'\r\n\r\nimport './ShowAlgorithm.css'\r\n\r\nconst ShowAlgorithm = (props) => {\r\n    let algo = \"{Select Algorithm}\"\r\n    if(props.value===1) {\r\n        algo = <BubbleSort colorArr = {props.state.Algocolor} bubble={props.state.BubblesortAlgo} />\r\n    } else if(props.value===2) {\r\n        algo = <SelectionSort colorArr = {props.state.AlgocolorSelect} selection={props.state.SelectionSortAlgo} />\r\n    } else if(props.value===3) {\r\n        algo = <InsertionSort colorArr = {props.state.AlgocolorSelect} insertion={props.state.InsertionSortAlgo} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h3 className=\"head\">ALGORITHM</h3>\r\n            <div className=\"algo-text\">{algo}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowAlgorithm\r\n","import React, { Component } from 'react'\r\n\r\nimport './Sorter.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport ModalGuide from '../../containers/Modal/ModalGuide'\r\nimport Navbar from '../UI/Navbar/Navbar'\r\nimport ArrayDisplay from '../../containers/ArrayDisplay/ArrayDisplay'\r\nimport ToolBar from '../UI/ToolBar/ToolBar'\r\nimport ShowAlgorithm from '../ShowAlgorithm/ShowAlgorithm'\r\n\r\nclass Sorter extends Component {\r\n\r\n    state = {\r\n        array: [],\r\n        colors: [],\r\n        arrayLen: 25,\r\n        speed: 300,\r\n        width: \"25px\",\r\n        showValue: true,\r\n        disableInput: false,\r\n        transition: \"0.3s\",\r\n        algorithm: 0,\r\n        BubblesortAlgo: [\"for i=0 to last_Element\",\"for j=0 to Last_Unsorted_Element\",\"if left_Element>right_Element\",\"swap(left_Element,right_Element)\"],\r\n        Algocolor: [\"white\",\"white\",\"white\",\"white\"],\r\n        SelectionSortAlgo: [\"Repeat (n-1) times\",\"set first unsorted element as min\",\"for each unsorted element\",\"if element<min\",\"set element as new min\",\"swap min with first unsorted element\"],\r\n        AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"white\"],\r\n        InsertionSortAlgo: [\"Mark first element as sorted\",\"for each unsorted x\",\"temp=x\",\"for j=last_Sorted_Index to 0\",\"if temp < current element[j]\",\"move temp to the left by 1\"]\r\n    } \r\n\r\n    componentDidMount() {\r\n        this.arrayReset();\r\n    }\r\n\r\n    arrayReset = () => {\r\n        const new_array = []\r\n        const arrlength = this.state.arrayLen\r\n        for( let i=0; i<arrlength; i++) {\r\n            new_array.push(randomNumber(30,500))\r\n        }\r\n        let barwidth = this.barWidthCalculater(arrlength)\r\n        this.setState({\r\n            width: barwidth\r\n        })\r\n        let final_array = this.arrayHeightHandler(new_array)\r\n        this.setState({array: final_array, colors: Array(final_array.length).fill('blueviolet')})\r\n    }\r\n\r\n    speedChangeHandler = (event) => {\r\n        let Actualspeed = 601 - event.target.value\r\n        this.setState(\r\n            {speed: Actualspeed}\r\n        )\r\n        if(Actualspeed > 200) {\r\n            this.setState({transition: \"0.3s\"})\r\n        } else {\r\n            this.setState({transition: \"0s\"})\r\n        }\r\n    }\r\n\r\n    arraySizeHandler = (event) => {\r\n        const new_array = []\r\n        const arrlength = event.target.value\r\n        let barwidth = this.barWidthCalculater(arrlength)\r\n        this.setState({\r\n            width: barwidth\r\n        })\r\n        for( let i=0; i<arrlength; i++) {\r\n            new_array.push(randomNumber(30,500))\r\n        }\r\n        let final_array = this.arrayHeightHandler(new_array)\r\n        this.setState({arrayLen: event.target.value})\r\n        this.setState({array: final_array, colors: Array(final_array.length).fill('blueviolet')})\r\n    }\r\n\r\n    screenSizeHandler = (barNum) => {\r\n        let screen_width = window.innerWidth\r\n        if(screen_width < 1400 && screen_width>600) {\r\n            barNum*=0.75\r\n            barNum = barNum.toFixed(0)\r\n            let barwidth = barNum.toString()\r\n            return barwidth\r\n        } else if(screen_width <= 600 && screen_width>400) {\r\n            barNum*=0.3\r\n            barNum = barNum.toFixed(0)\r\n            let barwidth = barNum.toString()\r\n            return barwidth\r\n        } else if(screen_width <= 400) {\r\n            barNum*=0.28\r\n            barNum = barNum.toFixed(0)\r\n            let barwidth = barNum.toString()\r\n            return barwidth\r\n        } else {\r\n            let barwidth = barNum.toString()\r\n            return barwidth\r\n        }\r\n        \r\n    }\r\n    \r\n    arrayHeightHandler = (small_arr) => {\r\n        let screen_width = window.innerWidth\r\n        if(screen_width <= 600) {\r\n            for(let i=0;i<small_arr.length;i++) {\r\n                let ele = small_arr[i]\r\n                ele*=0.7\r\n                ele=ele.toFixed(0)\r\n                small_arr[i]=Number(ele)\r\n            }\r\n        } \r\n        return small_arr\r\n    }\r\n\r\n    barWidthCalculater = (arrlength) => {\r\n        let barwidth = \"25\"\r\n        if(arrlength<25 && arrlength>20){\r\n            barwidth = \"27\"\r\n        } else if(arrlength>25 && arrlength<30) {\r\n            barwidth = \"23\"\r\n        } \r\n        else if(arrlength>=10 && arrlength<=20) {\r\n            barwidth = \"33\"\r\n        } else if(arrlength>=30 && arrlength<35) {\r\n            barwidth = \"20\"\r\n        } else if(arrlength>=35 && arrlength<40) {\r\n            barwidth = \"17\"\r\n        } else if(arrlength>=40 && arrlength<=45) {\r\n            barwidth = \"14\"\r\n        } else if(arrlength>45 && arrlength<=50) {\r\n            barwidth = \"13\"\r\n        } else if(arrlength>50 && arrlength<=60) {\r\n            barwidth = \"12\"\r\n        } else if(arrlength>60 && arrlength<=70) {\r\n            barwidth = \"10\"\r\n        } else if(arrlength>70 && arrlength<=80) {\r\n            barwidth = \"8\"\r\n        } else if(arrlength>80 && arrlength<=90) {\r\n            barwidth = \"7\"\r\n        } else if(arrlength>=90) {\r\n            barwidth = \"6\"\r\n        }\r\n        let barwidthNum = Number(barwidth)\r\n        barwidth = this.screenSizeHandler(barwidthNum)\r\n        barwidthNum = Number(barwidth)\r\n        if(barwidthNum<20) {\r\n            this.setState({showValue: false})\r\n        } else {\r\n            this.setState({showValue: true})\r\n        }\r\n        barwidth += \"px\"\r\n        return barwidth;\r\n    }\r\n\r\n    ShowAlgorithmHandler = (v) => {\r\n        if(v===\"1\") {\r\n            this.setState({\r\n                algorithm: 1\r\n            })\r\n        } else if(v===\"2\") {\r\n            this.setState({\r\n                algorithm: 2\r\n            })\r\n        } else if(v===\"3\") {\r\n            this.setState({\r\n                algorithm: 3\r\n            })\r\n        }\r\n    }\r\n\r\n    bubblesorter = async () => {\r\n        this.setState({\r\n            disableInput: true,\r\n            algorithm: 1,\r\n        })\r\n        let arr = [...this.state.array]\r\n        var len = arr.length\r\n        let i, j;\r\n        const colors = []\r\n        let color = 'blueviolet'\r\n        this.setState({\r\n            Algocolor: [\"yellow\",\"white\",\"white\",\"white\"]\r\n        })\r\n            for (i=0; i < len; i++){\r\n                this.setState({\r\n                        Algocolor: [\"white\",\"yellow\",\"white\",\"white\"]\r\n                    })\r\n                    for (j=0; j < len-i-1; j++){\r\n                        let speed = this.state.speed\r\n                        for (let k=0; k<len; k++) {                           \r\n                            if(k===j || k===j+1 ) \r\n                            {\r\n                                color = 'red'\r\n                            }\r\n                            else if(colors[k]!=='green')\r\n                            {\r\n                                color = 'blueviolet'\r\n                            }\r\n                            else {\r\n                                color = 'green'\r\n                            }\r\n                            colors[k] = color\r\n                        }\r\n                        await new Promise(resolve => setTimeout(resolve, speed));\r\n                        this.setState({ array: arr})\r\n                        this.setState({\r\n                            Algocolor: [\"white\",\"white\",\"yellow\",\"white\"]\r\n                        })\r\n                        if (arr[j] > arr[j+1]){\r\n                            \r\n                            colors[j] = 'pink'\r\n                            colors[j+1] = 'pink'\r\n                            await new Promise(resolve => setTimeout(resolve, speed));\r\n                            this.setState({colors: colors})\r\n                            swap(arr, j, j+1);\r\n                            this.setState({\r\n                                Algocolor: [\"white\",\"white\",\"white\",\"yellow\"]\r\n                            })\r\n                        } \r\n                        else {\r\n                            await new Promise(resolve => setTimeout(resolve, speed));\r\n                        }\r\n                        await new Promise(resolve => setTimeout(resolve, speed));\r\n                        this.setState({colors:colors})\r\n                    }\r\n                    colors[len-i-1] = 'green'\r\n                    this.setState({colors: colors });\r\n                }\r\n                this.setState({\r\n                    disableInput: false,\r\n                    speed: 300,\r\n                    transition: \"0.3s\",\r\n                    Algocolor: [\"white\",\"white\",\"white\",\"white\"]\r\n                })\r\n    }\r\n\r\n    selectionSorter = async ()=> {\r\n        this.setState({\r\n            disableInput: true,\r\n            algorithm: 2,\r\n            AlgocolorSelect: [\"yellow\",\"white\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n        let arr = [...this.state.array]\r\n        let len = arr.length\r\n        let i,j, min_index;\r\n        let speed = this.state.speed\r\n        const colors = Array(arr.length).fill('blueviolet')\r\n        this.setState({\r\n            colors:colors,\r\n            AlgocolorSelect: [\"white\",\"yellow\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, speed));\r\n        for(i=0;i<len-1;i++) {\r\n            for(let l=i;l<len;l++) {\r\n                colors[l]=\"blueviolet\"\r\n            }\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n            min_index = i\r\n            colors[min_index]=\"red\"\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n                this.setState({\r\n                    colors:colors,\r\n                    AlgocolorSelect: [\"white\",\"white\",\"yellow\",\"white\",\"white\",\"white\"]\r\n                })\r\n            for(j=i+1;j<len;j++) \r\n            {\r\n                speed = this.state.speed\r\n                await new Promise(resolve => setTimeout(resolve, speed*0.3));\r\n                colors[j]=\"orange\"\r\n                this.setState({\r\n                    AlgocolorSelect: [\"white\",\"white\",\"white\",\"yellow\",\"white\",\"white\"]\r\n                })\r\n                if(arr[j] < arr[min_index])\r\n                {\r\n                    \r\n                    min_index = j    \r\n                    colors[min_index]=\"red\"\r\n                    for(let k=0;k<min_index;k++) {\r\n                        colors[k]=colors[k]!==\"green\" ? \"blueviolet\" : \"green\"\r\n                    }\r\n                    \r\n                    this.setState({\r\n                        colors:colors,\r\n                        AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"yellow\",\"white\"]\r\n                    })\r\n                    await new Promise(resolve => setTimeout(resolve, speed));\r\n                }\r\n                colors[j-1]=\"blueviolet\"\r\n                colors[min_index]=\"red\"\r\n                this.setState({\r\n                    colors:colors\r\n                })\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n            }\r\n            for(let m=i;m<len;m++) {\r\n                colors[m] = colors[m]!==\"red\" ? \"blueviolet\" : \"pink\"\r\n                colors[i]=\"pink\"\r\n            }\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            this.setState({\r\n                AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"yellow\"]\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            swap(arr, i, min_index)\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            this.setState({\r\n                array: arr\r\n            })\r\n            colors[i]=\"green\"\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n        }\r\n        colors[len-1]=\"green\"\r\n        colors[len-2]=\"green\"\r\n        this.setState({\r\n            colors:colors,\r\n            disableInput: false,\r\n            speed: 300,\r\n            transition: \"0.3s\",\r\n            AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n    }\r\n\r\n    insertionSorter = async () => {\r\n        this.setState({\r\n            disableInput: true,\r\n            algorithm: 3,\r\n            AlgocolorSelect: [\"white\",\"yellow\",\"white\",\"white\",\"white\",\"white\"]\r\n        })\r\n        let arr = [...this.state.array]\r\n        let len = arr.length\r\n        let colors = Array(arr.length).fill('blueviolet')\r\n        let speed = this.state.speed\r\n        await new Promise(resolve => setTimeout(resolve, speed*0.8));\r\n        for(let i=0;i<len;i++) {\r\n            let temp = arr[i]\r\n            if(i!==0) {\r\n                colors[i-1]='orange'\r\n            }\r\n            colors[i]='red'\r\n            this.setState({\r\n                colors:colors,\r\n                AlgocolorSelect: [\"white\",\"white\",\"yellow\",\"white\",\"white\",\"white\"]\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed));\r\n            this.setState({\r\n                AlgocolorSelect: [\"white\",\"white\",\"white\",\"yellow\",\"white\",\"white\"]\r\n            })\r\n            await new Promise(resolve => setTimeout(resolve, speed*0.8));\r\n            for(let j=i-1;j>=0;j--) {\r\n                speed = this.state.speed\r\n                let flag=0\r\n                this.setState({\r\n                    AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"yellow\",\"white\"]\r\n                })\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n                if(temp<arr[j]) {\r\n                    flag=0\r\n                    swap(arr, j, j+1)\r\n                    colors[j]='red'\r\n                    colors[j+1]='orange'\r\n                    this.setState({\r\n                        colors:colors,\r\n                        AlgocolorSelect: [\"white\",\"white\",\"white\",\"white\",\"white\",\"yellow\"]\r\n                    })\r\n                    await new Promise(resolve => setTimeout(resolve, speed));\r\n                    this.setState({\r\n                        array: arr,\r\n                        colors:colors\r\n                    })\r\n                } else {\r\n                    flag++\r\n                }\r\n                if(flag===1)\r\n                {\r\n                    let k=i\r\n                    while(k) {\r\n                        colors[k-1]='orange'\r\n                        k--\r\n                    }\r\n                    this.setState({\r\n                        colors:colors\r\n                    })\r\n                    break\r\n                }\r\n                if(flag) {\r\n                    colors[j]='orange'\r\n                    this.setState({\r\n                        colors:colors\r\n                    })\r\n                }\r\n            }\r\n            colors[0]='orange'\r\n            this.setState({\r\n                colors:colors\r\n            })\r\n        }\r\n        colors = Array(arr.length).fill('green')\r\n        this.setState({\r\n            array: arr,\r\n            colors: colors,\r\n            AlgocolorSelect: Array(6).fill(\"white\"),\r\n            disableInput: false,\r\n            speed: 300,\r\n            transition: \"0.3s\"\r\n        })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <ModalGuide />\r\n                <div className=\"main\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-2 col-12 toolbar\">\r\n                            <ToolBar state={this.state} clicked={this}/>\r\n                        </div>\r\n                        <div className=\"col-lg-7 col-12 array-display\">\r\n                            <ArrayDisplay state={this.state} />\r\n                        </div>\r\n                        <div className=\"col-lg-3 col-12\">\r\n                            <ShowAlgorithm value={this.state.algorithm} state={this.state} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction randomNumber(min, max) {  \r\n    return Math.floor(Math.random() * (max - min) + min); \r\n}  \r\n\r\n\r\nfunction swap(arr, first_Index, second_Index){\r\n    var temp = arr[first_Index];\r\n    arr[first_Index] = arr[second_Index];\r\n    arr[second_Index] = temp;\r\n}\r\n\r\nexport default Sorter","import React from 'react';\nimport './App.css';\n\nimport Sorter from './components/Sorter/Sorter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}